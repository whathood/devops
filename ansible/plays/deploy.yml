---

- hosts: all
  gather_facts: false
  vars:
    user: "{{ ansible_user }}"
    wh_log_dir: /var/log/whathood
  roles:
    - role: whathood.prep_docker_env
      tags: prep_docker_env

    - role: whathood.prep_log_dir
      tags: [ prep_log_dir ]

- hosts: all
  gather_facts: false
  vars:
    skip_db_check: true
  tasks:
  - name: touch php-zend.log
    file: path=/var/log/whathood/php-zend.log state=touch owner={{ansible_user}} mode=0777
    become: yes

  - name: make sure ssh-keyscan command works
    command: echo `ssh-keyscan github.com`
    become: yes

  - name: add github to known hosts
    command: echo `ssh-keyscan github.com` >> /root/.ssh/known_hosts
    become: yes

  # on setup, wh-foreman won't exist, so ignore errors
  - command: status wh-foreman
    register: result
    ignore_errors: yes

  - shell: stop wh-foreman
    become: yes
    when: '"started" in result.stdout'

  - command: status wh-worker
    register: result
    ignore_errors: yes

  - shell: stop wh-worker
    become: yes
    when: '"started" in result.stdout'

  - shell: docker stop wh-jsx || true
    become: yes
    when: (application_env is defined) and (application_env == 'development')

  - shell: docker rm -f wh-jsx || true
    become: yes
    when: (application_env is defined) and (application_env == 'development')

  - shell: docker start wh_memcached || true
    become: yes

  - name: checking database schema
    command: "{{ wh_src_dir }}/d-bin/check_db_schema"
    when: not skip_db_check

- hosts: all
  gather_facts: false
  tasks:
  - name: Setting whathood env var
    command: /bin/bash -c "echo 'WH_APP_ENV={{ item }}' >> /etc/environment"
    become: yes
    with_items: application_env

- hosts: all
  gather_facts: false
  vars:
    user: "{{ ansible_user }}"
  vars_files:
    - group_vars/vault.yml
  roles:
    - role: whathood.clone_repo

    - role: whathood.npm_setup
      tags: [ npm_install, npm_setup ]

    - role: whathood.compile_js
      tags: compile_js

- hosts: all
  gather_facts: false
  tasks:

  - name: make sure the doctrine proxy dir is writeable
    file: path={{ wh_src_dir }}/app/data/DoctrineORMModule/Proxy mode=777 owner={{ansible_user}} state=directory
    become: yes

  - name: set applicaton_env
    lineinfile:
      dest: "{{wh_src_dir}}/application_env"
      line: "{{application_env}}"
      create: yes

- hosts: all
  gather_facts: true
  tasks:
  - name: install project ruby gems
    command: /home/{{ ansible_user }}/.rvm/gems/ruby-2.3.1/wrappers/bundle install
    environment:
      PATH: "/home/{{ ansible_user }}/.rvm:{{ ansible_env.PATH }}"
    args:
      chdir: "{{wh_src_dir}}"
    tags: [ ruby, ruby-bundle ]

- hosts: all
  gather_facts: false
  vars_files:
    - group_vars/vault.yml
  vars:
    user: "{{ ansible_user }}"
  roles:
    - role: composer
      tags: composer
    - role: less
      tags: less

    - bundler

    - role: whathood.code_docs
      tags: code_docs

    - { role: copy_code, from_dir: "{{ wh_src_dir }}", to_dir: "{{deploy_dest_dir}}" }

    - { role: "nginx", container_name: "nginx", http_port: "81", app_dir: "{{ wh_src_dir }}" }

    - role: update_upstart
      tags: update_upstart
      become: yes

    # XXJIM: uncomment after you sort out the vault issues
    # - role: jimrsmiley.rollbar_deploy_notify
    #   vars:
    #     access_token: "{{ rollbar_access_token }}"
    #     rollbar_environment: "{{ application_env }}"
    #     git_dir: "{{ wh_src_dir }}"
    #   tags: rollbar_notify_deploy